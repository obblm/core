<?php

declare(strict_types=1);

namespace Obblm\Core\Tests\Infrastructure\Repository\Doctrine;

use Obblm\Core\Domain\Model\Rule;
use Obblm\Core\Domain\Repository\RuleRepositoryInterface;
use Obblm\Core\Domain\Service\Rule\RuleService;
use Obblm\Core\Infrastructure\Repository\Doctrine\RuleRepository;
use Obblm\Core\Tests\Fixtures\Doctrine\RuleBuilder;
use Obblm\Core\Tests\MessageTestCase;

class RuleRepositoryTest extends MessageTestCase
{
    private ?RuleRepository $repository;
    private ?RuleService $service;
    private Rule $rule;

    public function setUp(): void
    {
        parent::setUp();

        $this->repository = static::getContainer()->get(RuleRepositoryInterface::class);

        $this->rule = RuleBuilder::for(static::getContainer())->build();
    }

    public function testGet()
    {
        $rule = $this->repository->get($this->rule->getId());
        self::assertSame($this->rule, $rule);
    }

    public function testSave()
    {
        $this->rule->setName('toto');
        $this->repository->save($this->rule);
        $rule = $this->repository->get($this->rule->getId());
        self::assertSame($this->rule, $rule);
        self::assertSame('toto', $rule->getName());
    }

    public function testDelete()
    {
        $id = $this->rule->getId();
        $this->repository->delete($this->rule);
        $rule = $this->repository->get($id);
        self::assertEquals(null, $rule);
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
